plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.2.5'
}

group = 'com.spaceship'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    
    // Logging
    implementation 'ch.qos.logback:logback-classic:1.5.3'
    implementation 'org.slf4j:slf4j-api:2.0.12'

    // Utils
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
}

application {
    mainClass = 'Pen_and_Paper_SpaceshipBattleGame'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

run {
    standardInput = System.in
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

checkstyle {
    toolVersion = '10.12.7'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    configurations {
        checkstyle {
            resolutionStrategy {
                force 'com.google.guava:guava:31.1-jre'
            }
        }
    }
}

spotbugs {
    toolVersion = '4.8.3'
    effort = 'default'
    reportLevel = 'high'
    ignoreFailures = true
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        html {
            required = true
        }
    }
}

tasks.named('check') {
    dependsOn 'spotbugsMain', 'spotbugsTest'
}

// Custom task to create directories
task createDirs {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

// Custom task to show project structure
task projectStructure {
    doLast {
        println "Project Structure:"
        println "├── src"
        println "│   ├── main"
        println "│   │   ├── java"
        println "│   │   └── resources"
        println "│   └── test"
        println "│       ├── java"
        println "│       └── resources"
        println "├── build.gradle"
        println "├── settings.gradle"
        println "└── README.md"
    }
}

